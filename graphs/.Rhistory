aes(x=Strain,y=Gene,fill=Log2Fold)) +
scale_fill_gradient2(limits=c(-2,2),oob=scales::squish) +
theme(axis.text.x = element_text(size  = 10,
angle = 90,
hjust = 1,
vjust = 0.5),
axis.text.y = element_text())+
geom_tile(color="black", size=0.2)+
ggtitle(title)
}
heatmap(total_data, c(mygenes, myrps), significant_only = FALSE, title = "Total mRNA abundance change")
heatmap(sr_data, c(mygenes, myrps), significant_only = FALSE, title = "mRNA synthesis rate change")
heatmap(dr_data, c(mygenes, myrps), significant_only = FALSE, title = "mRNA degradation rate change")
#### Tying to filter data based on skewness and other features of the within-gene values distribution
# found this function of stackoverflow to get mode from a vecor of values
getmode <- function(v) {
uniqv <- unique(v)
return(uniqv[which.max(tabulate(match(v, uniqv)))])
}
# adds skewness, mode and median columns to the data
skewmodmed <- function(data) {
skew_vector <- vector()
mode_vector <- vector()
median_vector <- vector()
for (gene in unique(data$Gene)) {
temp_data <- data[ which(data$Gene==gene), "Log2Fold"]
temp_data <- unlist(temp_data, use.names = FALSE)
skew_vector <- c(skew_vector, rep(skewness(temp_data), 47))
mode <- getmode(temp_data)
mode_vector <- c(mode_vector, rep(mode, 47))
median <- median(temp_data)
median
median_vector <- c(median_vector, rep(median, 47))
}
data$Skeweness <- skew_vector
data$Log2FoldMode <- mode_vector
data$Median <- median_vector
return(data)
}
dr_data <- skewmodmed(dr_data)
sr_data <- skewmodmed(sr_data)
total_data <- skewmodmed(total_data)
# from now you can filter the data according to the skeweness, median and mode values (distribution of Log2Fold values of one gene). An example is below
dr_data_negskew <- dr_data %>%
filter((Skeweness < -0.6) & (Median < 0.15 & Median > -0.3) & (Log2FoldMode < 0.08 & Log2FoldMode > -0.08))
#### Creating matrices from total mRNA levels, DR and SR data to build heatmaps with pheatmap
# SR data matrix
sr_logfold <- sr_data[, c("ORF", "Strain", "Log2Fold")]
sr_LF_matrix <- matrix(sr_logfold$Log2Fold, nrow=length(unique(sr_logfold$ORF)), ncol=length(unique(sr_logfold$Strain)), byrow=TRUE)
rownames(sr_LF_matrix) <- unique(sr_logfold$ORF)
colnames(sr_LF_matrix) <- unique(sr_logfold$Strain)
# DR data matrix
dr_logfold <- dr_data[, c("ORF", "Strain", "Log2Fold")]
dr_LF_matrix <- matrix(dr_logfold$Log2Fold, nrow=length(unique(dr_logfold$ORF)), ncol=length(unique(dr_logfold$Strain)), byrow=TRUE)
rownames(dr_LF_matrix) <- unique(dr_logfold$ORF)
colnames(dr_LF_matrix) <- unique(dr_logfold$Strain)
# Total mRNA level data matrix
total_logfold <- total_data[, c("ORF", "Strain", "Log2Fold")]
total_LF_matrix <- matrix(total_logfold$Log2Fold, nrow=length(unique(total_logfold$ORF)), ncol=length(unique(total_logfold$Strain)), byrow=TRUE)
rownames(total_LF_matrix) <- unique(total_logfold$ORF)
colnames(total_LF_matrix) <- unique(total_logfold$Strain)
# saving SR heatmap into a variable to reorder DR and Total levels data (see below)
sr_hm <- pheatmap(sr_LF_matrix, scale="row", main="mRNA synthesis rate", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
# saving DR heatmap
dr_hm <- pheatmap(dr_LF_matrix[-which(apply(dr_LF_matrix,1,function(x)any(is.na(x)))), ], main="mRNA degradation rate", scale="row", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
# saving total mRNA heatmap
total_hm <- pheatmap(total_LF_matrix, scale="row", main="Total mRNA level", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
# DR data for ribosomal and heat shock proteins
hsrp_dr_logfold <- dr_data[which(dr_data$Gene %in% myrps | dr_data$Gene %in% hs_genes_names), c("Gene", "Strain", "Log2Fold")]
hsrp_dr_LF_matrix <- matrix(hsrp_dr_logfold$Log2Fold, nrow=length(unique(hsrp_dr_logfold$Gene)), ncol=length(unique(hsrp_dr_logfold$Strain)), byrow=TRUE)
rownames(hsrp_dr_LF_matrix) <- unique(hsrp_dr_logfold$Gene)
colnames(hsrp_dr_LF_matrix) <- unique(hsrp_dr_logfold$Strain)
# SR data for ribosomal and heat shock proteins
hsrp_sr_logfold <- sr_data[which(sr_data$Gene %in% myrps | sr_data$Gene %in% hs_genes_names), c("Gene", "Strain", "Log2Fold")]
hsrp_sr_LF_matrix <- matrix(hsrp_sr_logfold$Log2Fold, nrow=length(unique(hsrp_sr_logfold$Gene)), ncol=length(unique(hsrp_sr_logfold$Strain)), byrow=TRUE)
rownames(hsrp_sr_LF_matrix) <- unique(hsrp_sr_logfold$Gene)
colnames(hsrp_sr_LF_matrix) <- unique(hsrp_sr_logfold$Strain)
# Total mRNA data for ribosomal and heat shock proteins
hsrp_total_logfold <- total_data[which(total_data$Gene %in% myrps | total_data$Gene %in% hs_genes_names), c("Gene", "Strain", "Log2Fold")]
hsrp_total_LF_matrix <- matrix(hsrp_total_logfold$Log2Fold, nrow=length(unique(hsrp_total_logfold$Gene)), ncol=length(unique(hsrp_total_logfold$Strain)), byrow=TRUE)
rownames(hsrp_total_LF_matrix) <- unique(hsrp_total_logfold$Gene)
colnames(hsrp_total_LF_matrix) <- unique(hsrp_total_logfold$Strain)
pheatmap(hsrp_dr_LF_matrix[-which(apply(hsrp_dr_LF_matrix,1,function(x)any(is.na(x)))), ], main="mRNA degradation rate of HS and RP proteins", scale="row", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 5)
pheatmap(hsrp_sr_LF_matrix, main="mRNA synthesis rate of HS and RP proteins", scale="row", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 5)
pheatmap(hsrp_total_LF_matrix, main="Total mRNA data of HS and RP proteins", scale="row", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 5)
pheatmap(sr_LF_matrix, scale="row", main="mRNA synthesis rate", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
pheatmap(dr_LF_matrix[sr_hm$tree_row[["order"]], sr_hm$tree_col[["order"]]], main="mRNA degradation rate with SR data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=T, show_rownames=T, fontsize_row = 2)
pheatmap(total_LF_matrix[sr_hm$tree_row[["order"]], sr_hm$tree_col[["order"]]], main="Total mRNA level with SR data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=T, show_rownames=T, fontsize_row = 2)
pheatmap(dr_LF_matrix[-which(apply(dr_LF_matrix,1,function(x)any(is.na(x)))), ], scale="row", main="mRNA degradation rate", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
pheatmap(sr_LF_matrix[dr_hm$tree_row[["order"]], dr_hm$tree_col[["order"]]], main="mRNA synthesis rate with DR data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
pheatmap(total_LF_matrix[dr_hm$tree_row[["order"]], dr_hm$tree_col[["order"]]], main="Total mRNA level with DR data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=T, show_rownames=T, fontsize_row = 2)
pheatmap(total_LF_matrix, scale="row", main="Total mRNA level", cluster_cols=T, cluster_rows=T, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
pheatmap(sr_LF_matrix[total_hm$tree_row[["order"]], total_hm$tree_col[["order"]]], main="mRNA syntheis rate with total mRNA level data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=TRUE, show_rownames=TRUE, fontsize_row = 2)
pheatmap(dr_LF_matrix[total_hm$tree_row[["order"]], total_hm$tree_col[["order"]]], main="Total mRNA level with total mRNA level data ordering", scale="row", cluster_cols=F, cluster_rows=F, show_colnames=T, show_rownames=T, fontsize_row = 2)
#### Dealing with the SR data clusters
# Slicing SR data in 4 gene clusters acoording to cluster analysis above
SR_clusters <- cutree(sr_hm$tree_row, k=4)
# retreive gene names from separate clusters
cluster1 <- names(SR_clusters)[SR_clusters == 1]
cluster2 <- names(SR_clusters)[SR_clusters == 2]
cluster3 <- names(SR_clusters)[SR_clusters == 3]
cluster4 <- names(SR_clusters)[SR_clusters == 4]
# retrieving all the genes in the dataset
all_genes <- unique(sr_logfold$ORF)
# saving lists of genes in clusters and all-genes in files (to ease the inspection)
# unfortunately I don't know the method to say what cluster is what based only on the heatmap... so do it manually, I guess.
write(cluster1, file="cluster1", ncol=1)
write(cluster2, file="cluster2", ncol=1)
write(cluster3, file="cluster3", ncol=1)
write(cluster4, file="cluster4", ncol=1)
write(all_genes, file="all_genes", ncol=1)
mapped_genes <- mappedkeys(org.Sc.sgdGENENAME)
# function to ease GO enrichment analysis of the desired clusters
EnGO <- function(allgenes, cluster) {
# cluster must be an integer number (index of the cluster)
# allgenes must be a named vector, values - cluster nember, names - genes
topDiffGenes <- function(allScore) {
return(allScore == cluster)
}
GOdata <-
new("topGOdata",
ontology = "CC",
allGenes = allgenes,
geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.org,
mapping = GOLib,
ID = "ensembl")
# Run a Fisher's exact test
resultFis <- runTest(GOdata, "classic", "fisher")
resultFis
# Generate results table
tableFis <- GenTable(GOdata, pValue = resultFis)
return(tableFis)
}
EnGO(SR_clusters, 1)
EnGO(SR_clusters, 2)
EnGO(SR_clusters, 3)
EnGO(SR_clusters, 4)
help("optimise")
help("optimise",package = "rstan")
help(optimise(),package = "rstan")
help("optimise()",package = "rstan")
help(fun = "optimise",package = "rstan")
help(optimizing, package = "rstan")
knitr::opts_chunk$set(echo = TRUE)
setupLibraries <- function(){
library(reshape2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(tidyverse)
library(cowplot)
library(ggmcmc)
library(shinystan)
library(bayesplot)
}
setupLibraries()
# The wild type data needs to be extracted from its various files and imported into a R variable
wildTypeFileNames <- list.files("~/Documents/WallaceLab/preChristmas2018Work/code/RNAFracQuant/intoTheWild/notebook/schurchDataSet/wildType", full.names=TRUE)
mutantFileNames <- list.files("~/Documents/WallaceLab/preChristmas2018Work/code/RNAFracQuant/intoTheWild/notebook/schurchDataSet/snf2Mutant", full.names=TRUE)
wildTypeData <- lapply(wildTypeFileNames,read.table)
mutantData <- lapply(mutantFileNames,read.table)
# Merge replicates into same dataframe
combinedWildTypeData <- wildTypeData[[1]]
combinedMutantData <- mutantData[[1]]
for(i in 2:48){
combinedWildTypeData <- merge(combinedWildTypeData,wildTypeData[[i]],by="V1") # replicates are merged horizontally by introducing new columns
combinedMutantData <- merge(combinedMutantData,mutantData[[i]],by="V1")
}
# Give combinedWildTypeData columns suitable names
columnNames <- vector(mode="character", length=49)
columnNames[1] <- "transcriptName"
for(i in 1:48) columnNames[i+1] <- paste0("Replicate_",i)
colnames(combinedWildTypeData) <- columnNames
colnames(combinedMutantData) <- columnNames
# Remove any consistantly low count data
library(magrittr) # pipe R package
library(tidyverse) # dataframe manipulation package
usableWildTranscripts <-
combinedWildTypeData %>%
reshape::melt(id="transcriptName") %>%
group_by(transcriptName) %>%
summarise(sufficientCounts = sum(value > 5),keep=(sufficientCounts==48)) %>%
filter(keep) %$%
transcriptName
usableMutantTranscripts <-
combinedMutantData %>%
reshape::melt(id="transcriptName") %>%
group_by(transcriptName) %>%
summarise(sufficientCounts = sum(value > 5),keep=(sufficientCounts==48)) %>%
filter(keep) %$%
transcriptName
cleanWildTypeData <-
combinedWildTypeData %>%
ungroup() %>%
filter(transcriptName %in% usableWildTranscripts) %>%
filter(transcriptName %in% usableMutantTranscripts)
cleanMutantData <-
combinedMutantData %>%
ungroup() %>%
filter(transcriptName %in% usableWildTranscripts) %>%
filter(transcriptName %in% usableMutantTranscripts)
setupLibraries()
# Create Stan model
buildLognormalPoissonModel <- function(stan_data) {
stan(model_code='// -*- mode: C -*-
data {
// Number of RNAs transcipts searched for
int<lower=1> NRNA;
// Array of integers for the counts data
// for each transcript for each sample
int<lower=0> counts[NRNA,48,2];
}
parameters {
vector<lower=0>[NRNA] mu[2];
// scale factor accounting for differing total RNA counts
real <lower=0> alpha[2,48];
// dispersion parameter for counts
vector<lower=0>[NRNA] sigma[2]; // must explicitly state support of priors, i.e. upper and lower bounds, otherwise samplier does not act as expected!!!
}
model{
// scale factor prior; one for each condition
for(i in 1:2) for(j in 1:48) alpha[i,j] ~ normal(0,1);
// conjugate prior for means; one for each gene and condition
for(j in 1:NRNA) for(i in 1:2) mu[i,j] ~ normal(0,1);
// Cauchy prior for lognormal dispersion parameter; one for each gene and condition
for(j in 1:NRNA) for(i in 1:2) sigma[i,j] ~ cauchy(0,3);
// across both conditions, all genes and duplicates
for(i in 1:2) for(k in 1:NRNA) for(j in 1:48)  {
counts[k,j,i] ~ lognormal(alpha[i,j]*mu[i,k], sigma[i,k]);
}
}
',
data=stan_data,chains = 1,iter = 10)
}
# Format data and test stan model
chosenRNABatchSize = 100;
setupLibraries()
stanData <- list(NRNA = chosenRNABatchSize,counts = array(c(c(as.matrix(cleanWildTypeData[1:chosenRNABatchSize,2:49])),c(as.matrix(cleanMutantData[1:chosenRNABatchSize,2:49]))), dim = c(chosenRNABatchSize,48,2))) # Strange manipulation to merge multi-matrix count data into a single array
lognormalPoissonModel <- buildLognormalPoissonModel(stanData)
# Once test build is complete, run model properly
lognormalPoissonStanFit <- optimizing(lognormalPoissonModel,data = stanData,algorithm = "LBFGS")
help("stan")
setupLibraries()
# Create Stan model
buildLognormalPoissonModel <- function(stan_data) {
stan(./lnormModel.stan,
data=stan_data,chains = 1,iter = 10)
}
# Format data and test stan model
chosenRNABatchSize = 100;
setupLibraries()
stanData <- list(NRNA = chosenRNABatchSize,counts = array(c(c(as.matrix(cleanWildTypeData[1:chosenRNABatchSize,2:49])),c(as.matrix(cleanMutantData[1:chosenRNABatchSize,2:49]))), dim = c(chosenRNABatchSize,48,2))) # Strange manipulation to merge multi-matrix count data into a single array
lognormalPoissonModel <- buildLognormalPoissonModel(stanData)
setupLibraries()
# Create Stan model
buildLognormalPoissonModel <- function(stan_data) {
stan("./lnormModel.stan",
data=stan_data,chains = 1,iter = 10)
}
# Format data and test stan model
chosenRNABatchSize = 100;
setupLibraries()
stanData <- list(NRNA = chosenRNABatchSize,counts = array(c(c(as.matrix(cleanWildTypeData[1:chosenRNABatchSize,2:49])),c(as.matrix(cleanMutantData[1:chosenRNABatchSize,2:49]))), dim = c(chosenRNABatchSize,48,2))) # Strange manipulation to merge multi-matrix count data into a single array
lognormalPoissonModel <- buildLognormalPoissonModel(stanData)
# Once test build is complete, run model properly
lognormalPoissonStanFit <- optimizing("./lnormModel.stan",data = stanData,algorithm = "LBFGS")
help("stanc")
# Once test build is complete, run model properly
lnormModel <- stanc("./lnormModel.stan")
lognormalPoissonStanFit <- optimizing("./lnormModel.stan",data = stanData,algorithm = "LBFGS")
# Once test build is complete, run model properly
lnormModel <- stanc("./lnormModel.stan")
lognormalPoissonStanFit <- optimizing(lnormModel,data = stanData,algorithm = "LBFGS")
help("optimizing")
# Once test build is complete, run model properly
lnormModel <- stanc("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel,data = stanData,algorithm = "LBFGS")
# Once test build is complete, run model properly
lnormModel <- stanc("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel,algorithm = "LBFGS")
# Once test build is complete, run model properly
lnormModel <- stanc("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel)
# Once test build is complete, run model properly
lnormModel <- stan_model("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel)
# Once test build is complete, run model properly
lnormModel <- stan_model("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel,data = stanData)
# Once test build is complete, run model properly
lnormModel <- stan_model("./lnormModel.stan")
lognormalPoissonStanFit <- rstan::optimizing(lnormModel,data = stanData)
parameters <- rstan::extract(lognormalPoissonStanFit)
R
version
help(rnbinom)
browseVignettes("Biostrings")
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), log = log(1 : 1000))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=log,y=uniform))
library(ggplot2)
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), log = log(1 : 1000))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=log,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=log))
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), log = e^(1 : 1000))
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), log = exp(1 : 1000))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=exp))
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), exp = exp(1 : 1000))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=exp))
uniformVsLog <- data.frame(x = 1 : 1000, uniform = rep(1,1000), e = exp(1 : 1000))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e))
uniformVsLog <- data.frame(x = 1 : 100, uniform = rep(1,100), e = exp(1 : 100))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e))
uniformVsLog <- data.frame(x = seq(1, 10, 100), uniform = rep(1,100), e = exp(seq(1, 10, 100)))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
seq(1, 10, 100)
help(seq())
help(seq
)
seq(1, 10, length.out = 100)
uniformVsLog <- data.frame(x = seq(1, 10, length.out = 100), uniform = rep(1,100), e = exp(seq(1, 10, length.out = 100)))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e))
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e)) + ylab("Probability") + xlab("log(x)")
exp(1)
exp(2)
exp(3)
exp(4)
exp(5)
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x")
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e)) + ylab("Likelihood") + xlab("log(x)") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x") theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x") +  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(uniformVsLog) + geom_line(aes(x=x,y=e)) + ylab("Likelihood") + xlab("log(x)") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x") +  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
setwd("~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting")
ggsave("./uniformPriorPlot.jpg",uniformPrior, device = "jpeg")
uniformPrior <- ggplot(uniformVsLog) + geom_line(aes(x=x,y=uniform)) + ylab("Likelihood") + xlab("x") +  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
transformedPrior <-  ggplot(uniformVsLog) + geom_line(aes(x=x,y=e)) + ylab("Likelihood") + xlab("log(x)") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggsave("./uniformPriorPlot.jpg",uniformPrior, device = "jpeg")
ggsave("./transformedPriorPlot.jpg",transformedPrior, device = "jpeg")
0.25^4*0.75^6
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
posteriorPlot
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/binomialJellybaby.R', echo=TRUE)
buildBernoulliModel <- function(stan_data) {
stan(model_code='// -*- mode: C -*-
data {
// Number of trials
int<lower=1> NTRIAL;
// Array of integers for the outcome data 1 == non-vegan
int<lower=0> type[NTRIAL];
}
parameters {
// gamma prior hyperparameters
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
real<lower=0, upper=1> theta3;
}
model{
theta1 ~ beta(0.5,0.5);
theta2 ~ gamma(4,2);
theta3 ~ normal(20,1);
for(i in 1:NTRIAL) {
type[i] ~ bernoulli(theta1);
type[i] ~ bernoulli(theta2);
type[i] ~ bernoulli(theta3);
}
}
',
data=stan_data,chains = 1,iter = 10)
}
stan_data <- list(NTRIAL = 10, type = c(0,0,1,0,1,1,0,0,0,1))
bernoulliModel <- buildBernoulliModel(stan_data)
bernoulliStanFit <- stan(data = stan_data,iter = 2000, fit =  bernoulliModel, chains = 4)
parameters <- data.frame(rstan::extract(bernoulliStanFit))
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1)
posteriorPlot
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/jellyBabyTrial.R', echo=TRUE)
posteriorPlot
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/jellyBabyTrial.R', echo=TRUE)
priorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour = "Normal"),kernel = "gaussian",adjust = 1.5) +
geom_density(aes(x=parameters$theta2,colour = "Gamma"),kernel = "gaussian",adjust = 1.5) +
geom_density(aes(x=parameters$theta3, colour = "Beta"),kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1)
ggsave("./priorPlotComparison.jpg",priorPlot, device = "jpeg")
source('~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/codeForNormalPrior.R', echo=TRUE)
library(rstan)
library(latex2exp)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
buildBernoulliModel <- function(stan_data) {
stan(model_code='// -*- mode: C -*-
data {
// Number of trials
int<lower=1> NTRIAL;
// Array of integers for the outcome data 1 == non-vegan
int<lower=0> type[NTRIAL];
}
parameters {
// gamma prior hyperparameters
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
real<lower=0, upper=1> theta3;
}
model{
theta1 ~ normal(0.25,0.1);
theta2 ~ gamma(4,2);
theta3 ~ beta(0.5,0.5);
for(i in 1:NTRIAL) {
type[i] ~ bernoulli(theta1);
type[i] ~ bernoulli(theta2);
type[i] ~ bernoulli(theta3);
}
}
',
data=stan_data,chains = 1,iter = 10)
}
stan_data <- list(NTRIAL = 10, type = c(0,0,1,0,1,1,0,0,0,1))
bernoulliModel <- buildBernoulliModel(stan_data)
no
posteriorPlot
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1)
parameters <- data.frame(rstan::extract(bernoulliStanFit))
bernoulliStanFit <- stan(data = stan_data,iter = 2000, fit =  bernoulliModel, chains = 4)
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1)
parameters <- data.frame(rstan::extract(bernoulliStanFit))
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1)
posteriorPlot
posteriorPlot + normalPriorPlot
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(x=x),kernel = "gaussian",adjust = 1.5) + xlim(0,1) +  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + ylab("Likelihood")
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(y=x),kernel = "gaussian",adjust = 1.5) + xlim(0,1) +  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + ylab("Likelihood")
posteriorPlot
posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(y=x),kernel = "gaussian",adjust = 1.5)
posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(y=x),kernel = "gaussian",adjust = 1.5)
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(y=x),kernel = "gaussian",adjust = 1.5)
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(x=x),kernel = "gaussian",adjust = 1.5)
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(x=x,colour="Prior"),kernel = "gaussian",adjust = 1.5, linetype="dotted")
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(x=x,colour="Prior")colour = "black",kernel = "gaussian",adjust = 1.5, linetype="dotted")
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),colour = "red",kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) + geom_density(data = normalPrior,aes(x=x,colour="Prior"),colour = "black",kernel = "gaussian",adjust = 1.5, linetype="dotted")
#posteriorPlot <-
ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) +
geom_density(data = normalPrior,aes(x=x,colour="Prior"),kernel = "gaussian",adjust = 1.5, linetype="dotted") +
scale_colour_manual(name=c("Prior","Posterior"),values = c("black","red"))
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) +
geom_density(data = normalPrior,aes(x=x,colour="Prior"),kernel = "gaussian",adjust = 1.5, linetype="dotted") +
scale_colour_manual(name=c("Prior","Posterior"),values = c("black","red"))
ggsave("./jellyBabyPlot.jpg", posteriorPlot, device = "jpeg")
setwd("~/Documents/WallaceLab/postXmas2018Work/2ndEASTBIOThematicMeeting/graphs")
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) +
geom_density(data = normalPrior,aes(x=x,colour="Prior"),kernel = "gaussian",adjust = 1.5, linetype="dotted") +
scale_colour_manual(c("Prior","Posterior"),values = c("black","red"))
posteriorPlot
posteriorPlot <- ggplot(parameters) + geom_density(aes(x=parameters$theta1, colour="Posterior"),kernel = "gaussian",adjust = 1.5) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlab(TeX("$\\theta$")) + ylab("Probability") + xlim(0,1) +
geom_density(data = normalPrior,aes(x=x,colour="Prior"),kernel = "gaussian",adjust = 1.5, linetype="dotted") +
scale_colour_manual(name="",c("Prior","Posterior"),values = c("black","red"))
posteriorPlot
ggsave("./jellyBabyPlot.jpg", posteriorPlot, device = "jpeg")
